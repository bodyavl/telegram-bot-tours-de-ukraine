import os
import logging
from flask import Flask, request
import telebot
from telebot import types

from config import API_TOKEN
from catalog import get_catalog, get_item_by_id
from orders import handle_order
from admin import (
    handle_admin,
    handle_add_item,
    handle_remove_item,
    handle_orders
)
import messages

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.DEBUG)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
bot = telebot.TeleBot(API_TOKEN, threaded=False)
app = Flask(__name__)

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ---
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_menu.add(
    types.KeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —Ç—É—Ä—ñ–≤"),
    types.KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"),
    types.KeyboardButton("üÜò –î–æ–ø–æ–º–æ–≥–∞"),
    types.KeyboardButton("‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫")
)

# --- –ö–æ–º–∞–Ω–¥–∏ ---
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, messages.WELCOME_TEXT, parse_mode="Markdown", reply_markup=main_menu)

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.send_message(message.chat.id, messages.HELP_TEXT, parse_mode="Markdown")

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, messages.INFO_TEXT, parse_mode="Markdown")

@bot.message_handler(commands=['catalog'])
def catalog(message):
    catalog = get_catalog()
    for item in catalog:
        btn = types.InlineKeyboardMarkup(row_width=2)
        btn.add(
            types.InlineKeyboardButton("üîç –î–µ—Ç–∞–ª—ñ", callback_data=f"detail_{item['id']}"),
            types.InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data=f"order_{item['id']}")
        )
        msg = f"üìå {item['name']}\nüí∏ {item['price']} –≥—Ä–Ω"
        bot.send_message(message.chat.id, msg, reply_markup=btn)

@bot.message_handler(commands=['order'])
def order_info(message):
    bot.send_message(message.chat.id, "üì¶ –©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ /catalog —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ó–∞–º–æ–≤–∏—Ç–∏'.")

# --- Inline –∫–Ω–æ–ø–∫–∏ ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("detail_"):
        item_id = int(call.data.split("_")[1])
        item = get_item_by_id(item_id)
        if item:
            text = f"üìå {item['name']}\nüìù {item['description']}\nüí∞ {item['price']} –≥—Ä–Ω"
            bot.send_message(call.message.chat.id, text)
    elif call.data.startswith("order_"):
        item_id = int(call.data.split("_")[1])
        handle_order(bot, call.message, call.from_user, item_id)
    elif call.data == "catalog":
        catalog(call.message)

# --- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ---
@bot.message_handler(commands=['admin'])
def admin(message):
    handle_admin(bot, message)

@bot.message_handler(commands=['add_item'])
def add_item(message):
    handle_add_item(bot, message)

@bot.message_handler(commands=['remove_item'])
def remove_item(message):
    handle_remove_item(bot, message)

@bot.message_handler(commands=['orders'])
def orders(message):
    handle_orders(bot, message)

# --- –í—ñ–¥–≥—É–∫–∏ ---
@bot.message_handler(commands=['feedback'])
def feedback(message):
    bot.send_message(message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫:")
    bot.register_next_step_handler(message, process_feedback)

def process_feedback(message):
    from config import ADMIN_IDS
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"üìù –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ @{message.from_user.username or '–Ω–µ–≤—ñ–¥–æ–º–æ'}:\n{message.text}")
    bot.send_message(message.chat.id, messages.FEEDBACK_THANKS)

# --- –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –¥–æ–≤—ñ–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
@bot.message_handler(func=lambda message: True)
def default(message):
    text = message.text.lower()
    if "–∫–∞—Ç–∞–ª–æ–≥" in text or "—Ç–æ–≤–∞—Ä–∏" in text:
        catalog(message)
    elif "–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" in text:
        order_info(message)
    elif "–ø—Ä–∏–≤—ñ—Ç" in text or "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è" in text:
        bot.send_message(message.chat.id, "üëã –í—ñ—Ç–∞—é! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
    elif "—è–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" in text:
        bot.send_message(message.chat.id, "üîΩ –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–∫—Ä–∏–π /catalog —ñ –Ω–∞—Ç–∏—Å–Ω–∏ 'üõí –ó–∞–º–æ–≤–∏—Ç–∏' –ø—ñ–¥ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º —Ç—É—Ä–æ–º.")
    else:
        bot.send_message(message.chat.id, messages.UNKNOWN_COMMAND)

# --- –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ Telegram (Webhook) ---
@app.route(f"/{API_TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    logging.debug(f"üì® UPDATE: {json_str}")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

# --- Ping –º–∞—Ä—à—Ä—É—Ç ---
@app.route("/", methods=["GET"])
def index():
    return "Tours de Ukraine bot is running!", 200

# --- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Webhook ---
if __name__ == "__main__":
    bot.remove_webhook()
    webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{API_TOKEN}"
    print("üîó Setting webhook:", webhook_url)
    bot.set_webhook(url=webhook_url)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
