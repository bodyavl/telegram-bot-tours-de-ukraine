# bot.py

import telebot
from telebot import types

from config import API_TOKEN
from catalog import get_catalog, get_item_by_id
from orders import handle_order
from admin import (
    handle_admin, handle_add_item, handle_remove_item, handle_orders
)
import messages

bot = telebot.TeleBot(API_TOKEN)

# --- Reply Keyboard ---
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_menu.add(
    types.KeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —Ç—É—Ä—ñ–≤"),
    types.KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"),
    types.KeyboardButton("üÜò –î–æ–ø–æ–º–æ–≥–∞"),
    types.KeyboardButton("‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫")
)




# --- /start ---
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, messages.WELCOME_TEXT, reply_markup=main_menu)

# --- /help ---
@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.send_message(message.chat.id, messages.HELP_TEXT)

# --- /info ---
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, messages.INFO_TEXT)

# --- /catalog ---
@bot.message_handler(commands=['catalog'])
def catalog(message):
    catalog = get_catalog()
    for item in catalog:
        btn = types.InlineKeyboardMarkup()
        btn.add(types.InlineKeyboardButton("üîç –î–µ—Ç–∞–ª—ñ", callback_data=f"detail_{item['id']}"))
        btn.add(types.InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data=f"order_{item['id']}"))
        msg = f"üìå {item['name']}\nüí∏ {item['price']} –≥—Ä–Ω"
        bot.send_message(message.chat.id, msg, reply_markup=btn)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    text = message.text.lower()
    if "–∫–∞—Ç–∞–ª–æ–≥" in text:
        catalog(message)
    elif "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è" in text or "–ø—Ä–æ –±–æ—Ç–∞" in text:
        info(message)
    elif "–¥–æ–ø–æ–º–æ–≥–∞" in text:
        help_cmd(message)
    elif "–≤—ñ–¥–≥—É–∫" in text:
        feedback(message)
    else:
        bot.send_message(message.chat.id, messages.UNKNOWN_COMMAND)

# --- Inline –∫–Ω–æ–ø–∫–∏ ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("detail_"):
        item_id = int(call.data.split("_")[1])
        item = get_item_by_id(item_id)
        if item:
            text = f"üìå {item['name']}\nüìù {item['description']}\nüí∞ {item['price']} –≥—Ä–Ω"
            bot.send_message(call.message.chat.id, text)
    elif call.data.startswith("order_"):
        item_id = int(call.data.split("_")[1])
        handle_order(bot, call.message, call.from_user, item_id)

# --- /admin ---
@bot.message_handler(commands=['admin'])
def admin(message):
    handle_admin(bot, message)

@bot.message_handler(commands=['add_item'])
def add_item(message):
    handle_add_item(bot, message)

@bot.message_handler(commands=['remove_item'])
def remove_item(message):
    handle_remove_item(bot, message)

@bot.message_handler(commands=['orders'])
def orders(message):
    handle_orders(bot, message)

# --- /feedback ---
@bot.message_handler(commands=['feedback'])
def feedback(message):
    bot.send_message(message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫:")
    bot.register_next_step_handler(message, process_feedback)

def process_feedback(message):
    from config import ADMIN_IDS
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"üìù –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ @{message.from_user.username}:\n{message.text}")
    bot.send_message(message.chat.id, messages.FEEDBACK_THANKS)

# --- –Ü–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
@bot.message_handler(func=lambda m: True)
def default(message):
    text = message.text.lower()
    if "—Ç–æ–≤–∞—Ä–∏" in text or "–∫–∞—Ç–∞–ª–æ–≥" in text:
        catalog(message)
    elif "–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" in text:
        bot.send_message(message.chat.id, "üì¶ –©–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ /catalog")
    else:
        bot.send_message(message.chat.id, messages.UNKNOWN_COMMAND)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    bot.polling(none_stop=True)
